Il file Bus.java all'interno del package main contiene la logica del bus e viene istanziato dalla classe SimConfigurationFrame.java in base alle scelte effettuate dall'utente in fase di inizializzazione. Come prima cosa il bus ottiene una lista di coordinate; questa contiene l'insieme di punti ordinati che l'autobus deve attraversare e costituisce il percorso dell'autobus. 
Inoltre l'autobus deve essere in grado di riconoscere se delle coordinate corrispondono alle coordinate di una fermata di sua competenza. Di conseguenza in fase di inizializzazione viene creata una hashMap contenente proprio i punti relativi alle sole fermate che l'autobus deve effettuare. 
Cosi` facendo ogniqualvolta l'autobus avanza di un punto, deve interrogarsi per verificare se e` arrivato o no ad una fermata, e a seconda dei casi eseguire le opportune operazioni. Notare che entrambe le liste (lista delle coordinate da attraversare e lista delle coordinate delle fermate) sono ottenute facendo parsing dei relativi file .gpx presenti nella cartella gpx. Una volta inizializzate le strutture dati necessarie l'autobus e` pronto per partire. In particolare vengono inserite tutte le informazioni non mutevoli all'interno della SIB (per maggiori dettagli consultare il grafo dell'ontologia):

-locationData corrispondente all'autobus
-personData corrispondente all'autobus
-busId
-Linea e massimo numero di posti disponibili

Queste informazioni sono statiche, e dunque non variano mai all'interno della stessa simulazione. Tuttavia assumeranno valori diversi gli attributi degli oggetti elencati precedentemente, ad esempio ogniqualvolta l'autobus avanza di una posizione, aggiornera` i literal 'latitude' e 'longitude' dell'oggetto locationData. 
In modo analogo vengono aggiornati gli attributi di personData ad ogni fermata. 
Le operazioni fondamentali dell'autobus si sviluppano attraverso tre cicli for: il ciclo piu` esterno corrisponde al numero di giorni da simulare, quello intermedio al numero di corse da simulare, mentre quello piu` interno corrisponde alla lista di punti sulla mappa che l'autobus deve attraversare. Ad esempio uno scenario classico d'escuzione dell'autobus e` il seguente:
-si ottengono le coordinate del prossimo punto da attraversare
-si controlla se le coordinate relative al punto corrispondono a quelle di una fermata.
In caso negativo si aggiorna semplicemente l'oggetto locationData (in tal modo il visualizzatore che ha effettuato la subscribe su questa infromazione e` in grado di spostare il merker dell'autobus in tempo reale), in caso affermativo e` necessario inserire nella SIB tutte le informazioni necessarie in accordo con l'ontologia, ad esempio si aggiornano gli attributi dell'oggetto personData, oppure viene indicato l'eventuale presenza del controllore.

Infine le ultime due operazioni fondamentali dell'autobus sono necessarie per avere una corretta simulazione.
A questo scopo infatti, ciascun autobus al termine della simulazione di una giornata, invoca il meotdo SimulationConfig.getInstance().waitForBarrier(). 
Questa barriera serve a far si` che un autobus non inizi la simulazione del giorni i+1 prima che gli altri autobus abbiano terminato la simulazione del giorno i. 
In modo del tutto analogo e` presente una barriera al termine dell'intera simulazione; in questo modo solo quando tutti gli autobus hanno percorso l'ultima corsa dell'ultimo giorno di simulazione, viene sbloccato il main, che successivamente invoca il metodo opportuno sulla classe StatisticsFrame per calcolare e visualizzare a schermo le statistiche della simulazione.


La generazione delle persone che salgono e scendono ad ogni fermata avviene internamente alla classe "Bus", così come l'emissione delle multe da parte del controllore quando quest'ultimo sale a bordo del pullman.
La logica di generazione delle persone fa uso di sei variabili ("descendedRealPerson", "ascendedRealPerson", "descendedPayingPerson", "ascendedRealPerson", "realPerson" e "payingPerson") che tengono il conto delle persone, paganti e non, salite e scese ad ogni fermata, e di quelle paganti e non presenti in un determinato istante nel bus. 
Ad ogni fermata (eccetto l'ultima) vengono generate randomicamente le persone reali che salgono (dal metodo "generateAscendingRealPerson") tenendo in considerazione le persone reali attualmente a bordo e la massima capienza dell'autobus (configurabile nella classe "SimulationConfig" che contiene i parametri principali dell'applicazione). 
Successivamente si determina il numero di persone paganti fra quelle reali salite (metodo "generateAscendingPayingPerson") utilizzando la probabilità di evasione del biglietto (reperibile nella classe "SimulationConfig" e configurabile dal frame iniziale "SimConfigurationFrame"). 
Quindi si generano casualmente le persone reali che scendono (metodo "generateDescendingRealPerson") fra le persone reali presenti al momento sul pullman.
Infine viene determinato il numero di persone paganti scese (metodo "generateDescendingPayingPerson") fra le reali che scendono, tenendo in considerazione sia la probabilità di evasione del biglietto che il numero di persone reali e paganti presenti a bordo. 
Dopo aver generato i flussi di persone in salita/discesa si aggiornano le variabili "realPerson" e "payingPerson". 
All'ultima fermata invece si fanno semplicemente scendere tutte le persone a bordo. 
I valori delle variabili "realPerson", "payingPerson", "ascendedRealPerson" e "ascendedPayingPerson" vengono scritti dall'autobus nella SIB ad ogni fermata inserendo nuove istanze per le entità "Affluence" (relativa a "realPerson" e "payingPerson") e "GetOn" (per "ascendedRealPerson" e "ascendedPayingPerson").

L'emissione delle multe avviene alla salita del controllore sul bus, cioè quando la variabile "inspectorPresent" assume il valore "true". 
Il controllore multerà tutte le persone sprovviste di biglietto presenti sul bus nella tratta fra la fermata in cui sale e la fermata successiva (ricordiamo che è stato supposto che il controllore scenda alla fermata successiva a quella in cui è salito). 
Il numero di multe effettuate è ottenuto quindi semplicemente dalla sottrazione fra le persone reali a bordo e quelle paganti, ed è salvato nella variabile "fines".
Per questa operazione non è necessaria una query del controllore alla SIB in quanto salendo sul pullman è in grado di vedere "con i suoi occhi" chi ha pagato e chi no. 
Dopo aver determinato il numero di multe effettuate, tale valore viene salvato nella SIB come nuova istanza dell'entità "Report".
